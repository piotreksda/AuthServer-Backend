@inject IJSRuntime JS
@inject HttpClient Http
@typeparam TModel

<div id="modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden justify-center items-center">
    <div class="bg-white p-4 rounded-lg w-1/3">
        <h2 class="text-xl font-bold mb-4">@Title</h2>
        <EditForm Model="@FormModel" OnValidSubmit="HandleValidSubmit">
            <div>
                @ChildContent
            </div>
            <div class="flex justify-end mt-4">
                <button id="modalCloseButton" type="button" class="bg-blue-500 text-white font-bold py-2 px-4 rounded" @onclick="CloseModal">Cancel</button>
                <button type="submit" class="bg-blue-500 text-white font-bold py-2 px-4 rounded">Submit</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public TModel FormModel { get; set; }
    [Parameter] public EventCallback OnSuccess { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string PostUrl { get; set; }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync(PostUrl, FormModel);
        if (response.IsSuccessStatusCode)
        {
            await OnSuccess.InvokeAsync();
            await CloseModal();
        }
        else
        {
            //todo: Handle error
            Console.Error.WriteLine("Error: Failed to submit the form.");
        }
    }

    public async Task OpenModal()
    {
        await JS.InvokeVoidAsync("openModal");
    }

    public async Task CloseModal()
    {
        await JS.InvokeVoidAsync("closeModal");
    }

}
