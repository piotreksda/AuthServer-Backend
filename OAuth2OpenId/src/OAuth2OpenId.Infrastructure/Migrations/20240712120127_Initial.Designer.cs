// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OAuth2OpenId.Infrastructure.EntityFramework;

#nullable disable

namespace OAuth2OpenId.Infrastructure.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20240712120127_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.AccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Jwi")
                        .HasColumnType("uuid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessTokens", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.AuthorizationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChallengeVerifier")
                        .HasColumnType("text");

                    b.Property<string>("ChallengeVerifierMethod")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Nonce")
                        .HasColumnType("text");

                    b.Property<int>("RedirectUriId")
                        .HasColumnType("integer");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RedirectUriId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorizationCodes", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ClientEnvironment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientEnvironments", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ClientGrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientGrands", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientScopes", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.IdToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Jwi")
                        .HasColumnType("uuid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("IdTokens", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.RedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientEnvironmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientEnvironmentId");

                    b.ToTable("RedirectUris", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ResourceServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResourceServers", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ResourceServersClientEnvironments", b =>
                {
                    b.Property<int>("ResourceServerId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientEnvironmentId")
                        .HasColumnType("integer");

                    b.HasKey("ResourceServerId", "ClientEnvironmentId");

                    b.HasIndex("ClientEnvironmentId");

                    b.ToTable("ResourceServersClientEnvironments", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BadAttemptCount")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLockedDown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMfaRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockedDownUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Password", "OAuth2OpenId.Domain.Entities.User.Password#Password", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PasswordHash")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.UserPermit", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientScopeId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ClientScopeId");

                    b.HasIndex("ClientScopeId");

                    b.ToTable("UserPermits", (string)null);
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.AccessToken", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAuth2OpenId.Domain.Entities.User", null)
                        .WithMany("AccessTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.AuthorizationCode", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAuth2OpenId.Domain.Entities.RedirectUri", null)
                        .WithMany()
                        .HasForeignKey("RedirectUriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAuth2OpenId.Domain.Entities.User", null)
                        .WithMany("AuthorizationCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.Client", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ClientEnvironment", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.Client", null)
                        .WithMany("ClientEnvironments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ClientGrand", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.Client", null)
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ClientScope", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.Client", null)
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.IdToken", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAuth2OpenId.Domain.Entities.User", null)
                        .WithMany("IdTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.RedirectUri", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.ClientEnvironment", null)
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAuth2OpenId.Domain.Entities.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ResourceServersClientEnvironments", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.ClientEnvironment", "ClientEnvironment")
                        .WithMany("ResourceServersClientEnvironments")
                        .HasForeignKey("ClientEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAuth2OpenId.Domain.Entities.ResourceServer", "ResourceServer")
                        .WithMany("ResourceServersClientEnvironments")
                        .HasForeignKey("ResourceServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientEnvironment");

                    b.Navigation("ResourceServer");
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.UserPermit", b =>
                {
                    b.HasOne("OAuth2OpenId.Domain.Entities.ClientScope", "ClientScope")
                        .WithMany()
                        .HasForeignKey("ClientScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAuth2OpenId.Domain.Entities.User", null)
                        .WithMany("UserPermits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientScope");
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.Client", b =>
                {
                    b.Navigation("AllowedGrantTypes");

                    b.Navigation("AllowedScopes");

                    b.Navigation("ClientEnvironments");
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ClientEnvironment", b =>
                {
                    b.Navigation("RedirectUris");

                    b.Navigation("ResourceServersClientEnvironments");
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.ResourceServer", b =>
                {
                    b.Navigation("ResourceServersClientEnvironments");
                });

            modelBuilder.Entity("OAuth2OpenId.Domain.Entities.User", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("AuthorizationCodes");

                    b.Navigation("IdTokens");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserPermits");
                });
#pragma warning restore 612, 618
        }
    }
}
